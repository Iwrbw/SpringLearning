<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--这个指向空的构造函数-->
    <bean name="bean1" class="com.helloworld.use.constructor.HelloWorld"/>

    <!--指向有参的构造函数-->
    <bean name="bean2" class="com.helloworld.use.constructor.HelloWorld">
        <constructor-arg index="0" value="Hello Spring"/>
    </bean>
    <!--这里需要制定工厂方法-->
    <bean name="bean3" class="com.helloworld.use.statis.factory.HelloApiStaticFactory" factory-method="newInstance">
        <constructor-arg index="0" value="Hello Spring,use static Factory"/>
    </bean>

    <!--定义静态工厂的bean-->
    <bean name="beanFactory" class="com.helloworld.use.factory.demo2.HelloUseStaticFactory" />
    <!--用工厂的bean实例化bean-->
    <bean name="bean4" factory-bean="beanFactory" factory-method="newInstance">
        <constructor-arg value="Hello Spring use static factory demo2" index="0"/>
    </bean>

    <!--通过构造器注入-->
    <!--1、通过索引 2、通过类型 3、根据参数名字 分别注入-->
    <bean id="byIndex" class="com.helloworld.use.di.construcor.HelloWorld3">
        <constructor-arg index="0" value="Hello World by Index"/>
        <constructor-arg index="1" value="1"/>
    </bean>

    <bean id="byType" class="com.helloworld.use.di.construcor.HelloWorld3">
        <constructor-arg type="java.lang.String" value="Hello World by Type"/>
        <constructor-arg type="int" value="2"/>
    </bean>

    <bean id="byName" class="com.helloworld.use.di.construcor.HelloWorld3">
        <constructor-arg name="message" value="Hello World by Name"/>
        <constructor-arg name="index" value="3"/>
    </bean>

    <!--增加工厂类，使用上面的三种方式注入-->
    <!--因为id的单一，我们将id首字母大写，但是编码首字母小写，这里只是用来区分-->
    <!--这里我们可以发现，class指向工厂类，增加factory-method配置-->
    <bean id="ByIndex" class="com.helloworld.use.di.construcor.HelloWorld3Factory" autowire="constructor" factory-method="newInstance">
        <constructor-arg index="0" value="Hello World by Index"/>
        <constructor-arg index="1" value="1"/>
    </bean>

    <!--<bean id="ByType" class="com.helloworld.use.di.construcor.HelloWorld3Factory" autowire="byType" factory-method="newInstance">-->
        <!--<constructor-arg type="java.lang.String" value="Hello World by Type"/>-->
        <!--<constructor-arg type="int" value="2"/>-->
    <!--</bean>-->

    <bean id="ByName" class="com.helloworld.use.di.construcor.HelloWorld3Factory" autowire="byName" factory-method="newInstance">
        <constructor-arg name="message" value="Hello World by Name"/>
        <constructor-arg name="index" value="3"/>
    </bean>

    <!--这里我们再来试一试使用工厂bean去实例化bean-->
    <bean id="factory" class="com.helloworld.use.di.construcor.HelloWorld3Factory"/>
    <!--这里需要注意，就不能使用惊天的newInstance方法了-->
    <bean id="fByType" factory-bean="factory" factory-method="newInstance">
        <constructor-arg type="java.lang.String" value="Hello World by Type"/>
        <constructor-arg type="int" value="2"/>
    </bean>

    <!--使用setter注入-->
    <bean id="bean5" class="com.helloworld.use.setter.HelloWorld4">
        <property name="message" value="Hello Spring by setter"/>
        <property name="index">
            <value>1</value>
        </property>
    </bean>
    <!--注入list测试类-->
    <!--<bean id="bean5Demo" class="com.helloworld.use.setter.HelloWorld4">-->
        <!--<property name="test">-->
            <!--<list value-type="java.lang.String" merge="true">-->
                <!--<value>1</value>-->
                <!--<value>2</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--使用setter注入其他bean-->
    <bean id="helloApi" class="com.helloworld.use.constructor.HelloWorld"/>
    <!--通过构造器注入-->
    <bean id="decorator" class="com.helloworld.use.setter.decorator.DecoratorBean">
        <constructor-arg index="0" ref="helloApi"/>
        <constructor-arg name="message" value="Hello Spring"/>
    </bean>
    <!--使用构造器注入，这里需要一个空的构造方法-->
    <bean id="decorator2" class="com.helloworld.use.setter.decorator.DecoratorBean">
        <property name="helloApi" ref="helloApi"/>
        <property name="message" value="Hello Spring2"/>
    </bean>
</beans>